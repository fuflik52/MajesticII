// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let isLoading = false;
let autoUpdateInterval = null;
let userStatsInterval = null;
let sessionId = null;

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–µ—Å—Å–∏–∏
function generateSessionId() {
    if (!sessionId) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∏–∑ localStorage
        const savedSessionId = localStorage.getItem('majestic_session_id');
        
        if (savedSessionId) {
            sessionId = savedSessionId;
            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π session ID:', sessionId.substring(0, 20) + '...');
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ID —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('majestic_session_id', sessionId);
            console.log('üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π session ID:', sessionId.substring(0, 20) + '...');
        }
    }
    console.log('üÜî –ò—Å–ø–æ–ª—å–∑—É–µ–º session ID:', sessionId.substring(0, 20) + '...');
    return sessionId;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    generateSessionId();
    checkServerStatus();
    loadCategories();
    startAutoUpdate();
    startUserStatsUpdate();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerStatus() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...');
        const response = await fetch('/api/status', {
            headers: {
                'X-Session-ID': generateSessionId()
            }
        });
        const data = await response.json();
        
        console.log('üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
        
        if (data.status === 'ready') {
            document.getElementById('status-text').textContent = 
                `–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ | –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.rulesCount} –ø—Ä–∞–≤–∏–ª`;
            console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤, –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${data.rulesCount} –ø—Ä–∞–≤–∏–ª`);
        } else {
            document.getElementById('status-text').textContent = '–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...';
            console.log('‚è≥ –°–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
        }
    } catch (error) {
        document.getElementById('status-text').textContent = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function updateUserStats() {
    try {
        console.log('üë• –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const response = await fetch('/api/users/stats', {
            headers: {
                'X-Session-ID': generateSessionId()
            }
        });
        const data = await response.json();
        
        console.log('üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data);
        
        const userIdElement = document.getElementById('user-id');
        const userOnlineElement = document.getElementById('user-online');
        
        if (userIdElement && userOnlineElement) {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (data.userNumber > 0) {
                userIdElement.textContent = `#${data.userNumber}`;
                console.log(`üë§ –í–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: #${data.userNumber}`);
            } else {
                userIdElement.textContent = '#0';
                console.log('üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            userOnlineElement.textContent = `${data.activeUsers} –æ–Ω–ª–∞–π–Ω`;
            console.log(`üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.activeUsers}`);
            
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∑–µ–ª–µ–Ω—ã–º –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            if (data.activeUsers > 0) {
                userOnlineElement.classList.add('user-counter-online');
            } else {
                userOnlineElement.classList.remove('user-counter-online');
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function startUserStatsUpdate() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É
    updateUserStats();
    
    // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    userStatsInterval = setInterval(updateUserStats, 10000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function loadCategories() {
    try {
        const response = await fetch('/api/categories');
        const data = await response.json();
        
        if (data.success) {
            const select = document.getElementById('category-filter');
            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏ (–∫—Ä–æ–º–µ "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            select.innerHTML = '<option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
            
            data.categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                select.appendChild(option);
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
function setQuestion(question) {
    document.getElementById('question-input').value = question;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
function handleKeyPress(event) {
    if (event.key === 'Enter' && !isLoading) {
        searchRules();
    }
}

// –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª
async function searchRules() {
    if (isLoading) return;

    const input = document.getElementById('question-input');
    const question = input.value.trim();
    
    if (!question) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å');
        return;
    }

    isLoading = true;
    updateSearchUI(true);

    try {
        const response = await fetch('/api/ask', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Session-ID': generateSessionId()
            },
            body: JSON.stringify({ question: question }),
        });

        const data = await response.json();

        if (data.success) {
            displayResults(data, question);
        } else {
            showError(data.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
        isLoading = false;
        updateSearchUI(false);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
function updateSearchUI(searching) {
    const button = document.getElementById('search-btn');
    
    if (searching) {
        button.disabled = true;
        button.innerHTML = '<div class="spinner"></div> –ü–æ–∏—Å–∫...';
    } else {
        button.disabled = false;
        button.innerHTML = 'üîç –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayResults(data, question) {
    const resultsSection = document.getElementById('results-section');
    const resultsContent = document.getElementById('results-content');
    
    if (data.rules.length === 0) {
        resultsContent.innerHTML = `
            <div class="no-results">
                <span class="emoji">ü§∑‚Äç‚ôÇÔ∏è</span>
                <h3>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                <p>–ü–æ –∑–∞–ø—Ä–æ—Å—É "${question}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∞–≤–∏–ª.</p>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.</p>
            </div>
        `;
    } else {
        let html = `
            <h3>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è: "${question}"</h3>
            <p style="color: var(--text-secondary); margin-bottom: 20px;">
                –ù–∞–π–¥–µ–Ω–æ ${data.totalFound} –ø—Ä–∞–≤–∏–ª –∑–∞ ${data.processingTime}–º—Å
            </p>
        `;
        
        data.rules.forEach(rule => {
            html += createRuleHTML(rule, true);
        });
        
        resultsContent.innerHTML = html;
    }
    
    resultsSection.classList.add('show');
    resultsSection.scrollIntoView({ behavior: 'smooth' });
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –ø—Ä–∞–≤–∏–ª–∞
function createRuleHTML(rule, showRelevance = false) {
    const relevanceHTML = showRelevance && rule.relevance ? 
        `<span class="rule-relevance">${rule.relevance}%</span>` : '';
    
    // –í—ã–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞
    const highlightedContent = highlightKeywords(rule.content, getSearchKeywords());
    const highlightedTitle = highlightKeywords(rule.title, getSearchKeywords());
    
    return `
        <div class="rule-item">
            <div class="rule-header">
                <span class="rule-number">–ü—É–Ω–∫—Ç ${rule.point}</span>
                <span class="rule-category">${rule.category}</span>
                ${relevanceHTML}
            </div>
            
            <div class="rule-title-highlighted">
                <strong>${highlightedTitle}</strong>
            </div>
            
            <div class="rule-content">
                ${highlightedContent}
            </div>
            
            <div class="rule-punishment">
                <strong>‚öñÔ∏è –ù–∞–∫–∞–∑–∞–Ω–∏–µ:</strong> ${rule.punishment}
            </div>
        </div>
    `;
}

// –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
function getSearchKeywords() {
    const query = document.getElementById('question-input').value.toLowerCase();
    return query.split(' ').filter(word => word.length > 2);
}

// –í—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ
function highlightKeywords(text, keywords) {
    if (!keywords || keywords.length === 0) return text;
    
    let highlightedText = text;
    keywords.forEach(keyword => {
        const regex = new RegExp(`(${keyword})`, 'gi');
        highlightedText = highlightedText.replace(regex, '<mark>$1</mark>');
    });
    
    return highlightedText;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞
async function showAllRules() {
    try {
        const response = await fetch('/api/rules');
        const data = await response.json();
        
        if (data.success) {
            const resultsSection = document.getElementById('results-section');
            const resultsContent = document.getElementById('results-content');
            
            let html = `
                <h3>üìã –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ (${data.total})</h3>
                <p style="color: var(--text-secondary); margin-bottom: 20px;">
                    –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
                </p>
            `;
            
            data.rules.forEach(rule => {
                html += createRuleHTML(rule);
            });
            
            resultsContent.innerHTML = html;
            resultsSection.classList.add('show');
            resultsSection.scrollIntoView({ behavior: 'smooth' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª');
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function filterByCategory() {
    const category = document.getElementById('category-filter').value;
    
    try {
        const url = category === 'all' ? '/api/rules' : `/api/rules?category=${encodeURIComponent(category)}`;
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.success) {
            const resultsSection = document.getElementById('results-section');
            const resultsContent = document.getElementById('results-content');
            
            const categoryName = category === 'all' ? '–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞' : category;
            
            let html = `
                <h3>üìÇ ${categoryName} (${data.total})</h3>
                <p style="color: var(--text-secondary); margin-bottom: 20px;">
                    –ü—Ä–∞–≤–∏–ª–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}"
                </p>
            `;
            
            if (data.rules.length === 0) {
                html += `
                    <div class="no-results">
                        <span class="emoji">üì≠</span>
                        <h3>–ù–µ—Ç –ø—Ä–∞–≤–∏–ª –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
                        <p>–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª.</p>
                    </div>
                `;
            } else {
                data.rules.forEach(rule => {
                    html += createRuleHTML(rule);
                });
            }
            
            resultsContent.innerHTML = html;
            resultsSection.classList.add('show');
            resultsSection.scrollIntoView({ behavior: 'smooth' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª');
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
function startAutoUpdate() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    autoUpdateInterval = setInterval(async () => {
        try {
            const response = await fetch('/api/status');
        const data = await response.json();
        
            if (data.status === 'ready') {
                const currentRulesCount = parseInt(document.getElementById('status-text').textContent.match(/\d+/)?.[0] || '0');
                
                if (data.rulesCount > currentRulesCount) {
                    console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${data.rulesCount} –ø—Ä–∞–≤–∏–ª (–±—ã–ª–æ ${currentRulesCount})`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    document.getElementById('status-text').textContent = 
                        `–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ | –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.rulesCount} –ø—Ä–∞–≤–∏–ª`;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    loadCategories();
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    showUpdateNotification(data.rulesCount - currentRulesCount);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
        }
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
function showUpdateNotification(newRulesCount) {
    const resultsSection = document.getElementById('results-section');
    const resultsContent = document.getElementById('results-content');
    
    resultsContent.innerHTML = `
        <div class="success">
            <h4>üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</h4>
            <p>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${newRulesCount} –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</p>
            <button class="btn btn-secondary" onclick="showAllRules()" style="margin-top: 10px;">
                üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞
            </button>
        </div>
    `;
    
    resultsSection.classList.add('show');
    resultsSection.scrollIntoView({ behavior: 'smooth' });
    
    // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        resultsSection.classList.remove('show');
    }, 5000);
}


// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–∞—Ö
function showZonesInfo() {
    const resultsSection = document.getElementById('results-section');
    const resultsContent = document.getElementById('results-content');
    
    resultsContent.innerHTML = `
        <div class="zones-info">
            <h3>üó∫Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–≤—ã—Ö –∑–æ–Ω–∞—Ö</h3>
            
            <div class="zone-info-card green-zone">
                <h4>üü¢ Green Zone</h4>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> –ì—É—Å—Ç–æ–Ω–∞—Å–µ–ª–µ–Ω–Ω–∞—è –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º–∏ –ª—é–¥—å–º–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ª—é–±—ã–µ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.</p>
                <p><strong>–¶–≤–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ:</strong> –ó–µ–ª—ë–Ω—ã–π</p>
                <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:</strong></p>
                <ul>
                    <li>–ó–∞–ø—Ä–µ—â–µ–Ω—ã –ª—é–±—ã–µ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</li>
                    <li>–ó–∞–ø—Ä–µ—â–µ–Ω—ã –ø–µ—Ä–µ—Å—Ç—Ä–µ–ª–∫–∏ –∏ —Å—Ç—Ä–µ–ª—å–±–∞</li>
                    <li>–ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è –∏ –ø–æ—Ö–∏—â–µ–Ω–∏—è</li>
                    <li>–ó–∞–ø—Ä–µ—â–µ–Ω–æ —É—Ö–æ–¥–∏—Ç—å –æ—Ç –ø–æ–≥–æ–Ω–∏</li>
                    <li>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –º—É–∑—ã–∫—É</li>
                </ul>
            </div>
            
            <div class="zone-info-card red-zone">
                <h4>üî¥ Red Zone</h4>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> –ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –≤ Los Santos, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ—Å—Ç—É–ø–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è.</p>
                <p><strong>–¶–≤–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ:</strong> –ö—Ä–∞—Å–Ω—ã–π</p>
                <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:</strong></p>
                <ul>
                    <li>–†–∞–∑—Ä–µ—à–µ–Ω—ã –ª—é–±—ã–µ –ø—Ä–µ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –±–µ–∑ –º–∞—Å–æ–∫</li>
                    <li>–° 23:00 –¥–æ 08:00 —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Å—Ç—Ä–µ–ª—å–±–∞ –ø–æ –≤–æ–æ—Ä—É–∂—ë–Ω–Ω—ã–º</li>
                    <li>–° 23:00 –¥–æ 08:00 —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ PG</li>
                </ul>
            </div>
            
            <div class="zone-info-card grey-zone">
                <h4>‚ö™ Grey Zone</h4>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> –ù–µ–æ–∫—Ä–∞—à–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π.</p>
                <p><strong>–¶–≤–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ:</strong> –ù–µ–æ–∫—Ä–∞—à–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å</p>
                <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:</strong></p>
                <ul>
                    <li>–†–∞–∑—Ä–µ—à–µ–Ω—ã –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–µ—Ä–∞</li>
                    <li>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞</li>
                </ul>
            </div>
            
            <button class="btn btn-primary" onclick="setQuestion('–∫–∞–∫–∏–µ –µ—Å—Ç—å –≤–∏–¥—ã –∑–æ–Ω')" style="margin-top: 20px; width: 100%;">
                üîç –ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∑–æ–Ω
            </button>
        </div>
    `;
    
    resultsSection.classList.add('show');
    resultsSection.scrollIntoView({ behavior: 'smooth' });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    const resultsSection = document.getElementById('results-section');
    const resultsContent = document.getElementById('results-content');
    
    resultsContent.innerHTML = `
        <div class="error">
            <h4>‚ùå –û—à–∏–±–∫–∞</h4>
            <p>${message}</p>
        </div>
    `;
    
    resultsSection.classList.add('show');
    resultsSection.scrollIntoView({ behavior: 'smooth' });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
function showSuccess(message) {
    const resultsSection = document.getElementById('results-section');
    const resultsContent = document.getElementById('results-content');
    
    resultsContent.innerHTML = `
        <div class="success">
            <h4>‚úÖ –£—Å–ø–µ—à–Ω–æ</h4>
            <p>${message}</p>
        </div>
    `;
    
    resultsSection.classList.add('show');
    resultsSection.scrollIntoView({ behavior: 'smooth' });
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        resultsSection.classList.remove('show');
    }, 3000);
}
