const express = require('express');
const cors = require('cors');
const fs = require('fs-extra');
const path = require('path');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = 5000;
const DATA_FILE = 'rules.json';
const USERS_FILE = 'users.json';

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let users = new Set();
let userSessions = new Map(); // sessionId -> { userId, lastSeen, userAgent }

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏ –Ω–∞ Vercel)
function loadUsers() {
    // –ù–∞ Vercel —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
    users = new Set();
    console.log(`üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (Vercel —Ä–µ–∂–∏–º)`);
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏ –Ω–∞ Vercel)
function saveUsers() {
    // –ù–∞ Vercel —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏
    console.log(`üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏: ${users.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
}

// Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.use((req, res, next) => {
    const sessionId = req.headers['x-session-id'] || req.query.sessionId;
    const userAgent = req.headers['user-agent'] || 'Unknown';
    
    if (sessionId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (userSessions.has(sessionId)) {
            const session = userSessions.get(sessionId);
            session.lastSeen = Date.now();
            session.userAgent = userAgent;
            // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        } else {
            // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const userId = uuidv4();
            users.add(userId);
            userSessions.set(sessionId, {
                userId: userId,
                lastSeen: Date.now(),
                userAgent: userAgent
            });
            saveUsers();
            console.log(`üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${users.size}: ${userId.substring(0, 8)}...`);
        }
    }
    
    next();
});


// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ —Ñ–∞–π–ª–∞
let rules = [];

function loadRules() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∞–≤–∏–ª...');
    console.log(`üìÅ –ò—â–µ–º —Ñ–∞–π–ª: ${DATA_FILE}`);
    console.log(`üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${process.cwd()}`);
    console.log(`üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:`, fs.readdirSync('.'));
    
    try {
        if (fs.existsSync(DATA_FILE)) {
            console.log(`üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø—Ä–∞–≤–∏–ª: ${DATA_FILE}`);
            const data = fs.readFileSync(DATA_FILE, 'utf8');
            console.log(`üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: ${data.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            rules = JSON.parse(data);
            console.log(`üìö –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${rules.length} –ø—Ä–∞–≤–∏–ª –∏–∑ ${DATA_FILE}`);
            
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–ø—Ä–∞–≤–∏–ª–∞
            if (!rules || rules.length === 0) {
                console.log(`‚ö†Ô∏è –§–∞–π–ª ${DATA_FILE} –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–ø—Ä–∞–≤–∏–ª–∞`);
                loadDemoRules();
            }
        } else {
            console.log(`‚ö†Ô∏è –§–∞–π–ª ${DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–ø—Ä–∞–≤–∏–ª–∞`);
            console.log(`üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:`, fs.readdirSync('.'));
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–ø—Ä–∞–≤–∏–ª–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
            loadDemoRules();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª:', error);
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ–º–æ-–ø—Ä–∞–≤–∏–ª...');
        loadDemoRules();
    }
}

function loadDemoRules() {
    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞...');
    try {
        if (fs.existsSync('demo_rules.txt')) {
            console.log('üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª demo_rules.txt');
            const demoData = fs.readFileSync('demo_rules.txt', { encoding: 'utf8' });
            console.log(`üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∏–∑ demo_rules.txt: ${demoData.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            
            rules = parseDemoRules(demoData);
            console.log(`üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ ${rules.length} –ø—Ä–∞–≤–∏–ª`);
            
            saveRules();
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${rules.length} –¥–µ–º–æ-–ø—Ä–∞–≤–∏–ª`);
        } else {
            console.log('‚ö†Ô∏è –§–∞–π–ª demo_rules.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞');
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞
            rules = createDefaultRules();
            console.log(`üè≠ –°–æ–∑–¥–∞–Ω–æ ${rules.length} –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª`);
            saveRules();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ-–ø—Ä–∞–≤–∏–ª:', error);
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
        console.log('üè≠ –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–∞–∫ fallback');
        rules = createDefaultRules();
        saveRules();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ HTML
function extractTextFromHTML(html) {
    // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
    let text = html.replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '');
    text = text.replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '');
    text = text.replace(/<noscript[^>]*>[\s\S]*?<\/noscript>/gi, '');
    text = text.replace(/<[^>]*>/g, '');
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
    text = text.replace(/&nbsp;/g, ' ');
    text = text.replace(/&amp;/g, '&');
    text = text.replace(/&lt;/g, '<');
    text = text.replace(/&gt;/g, '>');
    text = text.replace(/&quot;/g, '"');
    text = text.replace(/&#39;/g, "'");
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = text.replace(/\s+/g, ' ').trim();
    
    return text;
}

function parseDemoRules(text) {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ–º–æ-–ø—Ä–∞–≤–∏–ª...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ HTML
    if (text.includes('<!DOCTYPE') || text.includes('<html') || text.includes('<body')) {
        console.log('üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω HTML –∫–æ–Ω—Ç–µ–Ω—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç...');
        text = extractTextFromHTML(text);
        console.log(`üìñ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
    
    const lines = text.split('\n').filter(line => line.trim());
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${lines.length}`);
    const parsedRules = [];
    
    lines.forEach((line, index) => {
        console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${index + 1}: "${line}" (–¥–ª–∏–Ω–∞: ${line.length})`);
        const match = line.match(/^(\d+)\.\s*(.+?)\s*\|\s*(.+)$/);
        if (match) {
            const ruleText = match[2].trim();
            const newRule = {
                id: uuidv4(),
                point: match[1],
                title: ruleText.substring(0, 50) + (ruleText.length > 50 ? '...' : ''),
                content: ruleText,
                punishment: match[3].trim(),
                category: '–û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞',
                created: new Date().toISOString()
            };
            parsedRules.push(newRule);
            console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª–æ ${match[1]}: "${ruleText.substring(0, 30)}..."`);
        } else {
            console.log(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${index + 1} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É: "${line.substring(0, 100)}..."`);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            const simpleMatch = line.match(/^(\d+)\.\s*(.+)\s*\|\s*(.+)$/);
            if (simpleMatch) {
                console.log(`üîß –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–≥–µ–∫—Å —Å—Ä–∞–±–æ—Ç–∞–ª! –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ...`);
                const ruleText = simpleMatch[2].trim();
                const newRule = {
                    id: uuidv4(),
                    point: simpleMatch[1],
                    title: ruleText.substring(0, 50) + (ruleText.length > 50 ? '...' : ''),
                    content: ruleText,
                    punishment: simpleMatch[3].trim(),
                    category: '–û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞',
                    created: new Date().toISOString()
                };
                parsedRules.push(newRule);
                console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª–æ ${simpleMatch[1]}: "${ruleText.substring(0, 30)}..."`);
            }
        }
    });
    
    console.log(`üéØ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${parsedRules.length} –ø—Ä–∞–≤–∏–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
    return parsedRules;
}

function createDefaultRules() {
    return [
        {
            id: uuidv4(),
            point: '1',
            title: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –æ–±—è–∑–∞–Ω—ã...',
            content: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –æ–±—è–∑–∞–Ω—ã —Å–æ–±–ª—é–¥–∞—Ç—å —Å–ª—É–∂–µ–±–Ω—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É',
            punishment: 'WARN',
            category: '–û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞',
            created: new Date().toISOString()
        },
        {
            id: uuidv4(),
            point: '2',
            title: '–§–æ—Ä–º–∞ –æ–¥–µ–∂–¥—ã –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å...',
            content: '–§–æ—Ä–º–∞ –æ–¥–µ–∂–¥—ã –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
            punishment: 'Demorgan 35 –º–∏–Ω—É—Ç',
            category: '–í–Ω–µ—à–Ω–∏–π –≤–∏–¥',
            created: new Date().toISOString()
        },
        {
            id: uuidv4(),
            point: '6',
            title: '–ò–∑—ä—è—Ç–∏–µ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...',
            content: '–ò–∑—ä—è—Ç–∏–µ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–µ—Ä–≤–µ—Ä–∞',
            punishment: 'Demorgan 35 –º–∏–Ω—É—Ç / WARN',
            category: '–ü—Ä–æ—Ü–µ–¥—É—Ä—ã',
            created: new Date().toISOString()
        }
    ];
}

function saveRules() {
    // –ù–∞ Vercel —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏
    console.log(`üíæ –ü—Ä–∞–≤–∏–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏: ${rules.length} –ø—Ä–∞–≤–∏–ª`);
}

// –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª
function searchRules(query) {
    if (!query || query.trim() === '') {
        return rules.slice(0, 10); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–∞–≤–∏–ª
    }
    
    const searchTerms = query.toLowerCase().split(' ').filter(term => term.length > 2);
    const results = [];
    
    rules.forEach(rule => {
        let score = 0;
        const ruleText = (rule.content + ' ' + rule.punishment + ' ' + rule.category).toLowerCase();
        const queryLower = query.toLowerCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã
        if (ruleText.includes(queryLower)) {
            score += 10;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        searchTerms.forEach(term => {
            if (ruleText.includes(term)) {
                score += 1;
                
                // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞
                if (rule.content.toLowerCase().includes(term)) {
                    score += 3;
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ —Å–ª–æ–≤–∞
                const words = ruleText.split(/\s+/);
                words.forEach(word => {
                    if (word.startsWith(term)) {
                        score += 2;
                    }
                });
            }
        });
        
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
                if (queryLower.includes('—Ñ—Ä–∞–∫—Ü–∏–æ–Ω–Ω') && ruleText.includes('—Ñ—Ä–∞–∫—Ü–∏–æ–Ω–Ω')) {
                    score += 5;
                }
                if (queryLower.includes('—Å–∫–ª–∞–¥') && ruleText.includes('—Å–∫–ª–∞–¥')) {
                    score += 5;
                }
                if (queryLower.includes('–∏–∑—ä—è—Ç') && ruleText.includes('–∏–∑—ä—è—Ç')) {
                    score += 5;
                }
                if (queryLower.includes('—Ä–∞–Ω–≥') && ruleText.includes('—Ä–∞–Ω–≥')) {
                    score += 5;
                }
                if (queryLower.includes('–ø–æ–≤—ã—à') && ruleText.includes('–ø–æ–≤—ã—à')) {
                    score += 5;
                }
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –∑–æ–Ω
                if (queryLower.includes('–∑–æ–Ω–∞') && ruleText.includes('–∑–æ–Ω–∞')) {
                    score += 8;
                }
                if (queryLower.includes('green') && ruleText.includes('green')) {
                    score += 10;
                }
                if (queryLower.includes('red') && ruleText.includes('red')) {
                    score += 10;
                }
                if (queryLower.includes('grey') && ruleText.includes('grey')) {
                    score += 10;
                }
                if (queryLower.includes('–≤–∏–¥—ã') && ruleText.includes('–≤–∏–¥—ã')) {
                    score += 8;
                }
                if (queryLower.includes('–∫–∞—Ä—Ç–∞') && ruleText.includes('–∫–∞—Ä—Ç–∞')) {
                    score += 8;
                }
                if (queryLower.includes('—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è') && ruleText.includes('—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è')) {
                    score += 6;
                }
        
        if (score > 0) {
            results.push({
                ...rule,
                relevance: Math.min(100, Math.round((score / searchTerms.length) * 100))
            });
        }
    });
    
    return results.sort((a, b) => b.relevance - a.relevance).slice(0, 5);
}

// API Routes

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
app.get('/api/status', (req, res) => {
    console.log(`üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã. –ü—Ä–∞–≤–∏–ª –≤ –ø–∞–º—è—Ç–∏: ${rules.length}`);
    res.json({
        status: 'ready',
        message: '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ',
        rulesCount: rules.length,
        usersCount: users.size,
        activeSessions: userSessions.size,
        version: '2.0.0'
    });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users/stats', (req, res) => {
    const now = Date.now();
    const activeThreshold = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    const sessionId = req.headers['x-session-id'] || req.query.sessionId;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
    let activeUsers = 0;
    let currentUserId = null;
    let userNumber = 0;
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (sessionId && userSessions.has(sessionId)) {
        const currentSession = userSessions.get(sessionId);
        currentUserId = currentSession.userId;
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
        const usersArray = Array.from(users);
        userNumber = usersArray.indexOf(currentUserId) + 1;
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const [sessionId, session] of userSessions) {
        if (now - session.lastSeen < activeThreshold) {
            activeUsers++;
        }
    }
    
    res.json({
        totalUsers: users.size,
        activeUsers: activeUsers,
        totalSessions: userSessions.size,
        currentUserId: currentUserId,
        userNumber: userNumber,
        timestamp: new Date().toISOString()
    });
});

// –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
app.post('/api/ask', (req, res) => {
    const { question } = req.body;
    
    if (!question || question.trim() === '') {
        return res.status(400).json({
            success: false,
            error: '–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
        });
    }
    
    try {
        console.log(`‚ùì –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: ${question}`);
        
        const startTime = Date.now();
        const relevantRules = searchRules(question);
        const processingTime = Date.now() - startTime;
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${relevantRules.length} –ø—Ä–∞–≤–∏–ª –∑–∞ ${processingTime}–º—Å`);
        
        res.json({
            success: true,
            question: question,
            rules: relevantRules,
            totalFound: relevantRules.length,
            processingTime: processingTime
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞
app.get('/api/rules', (req, res) => {
    const { category, search } = req.query;
    console.log(`üìö –ó–∞–ø—Ä–æ—Å –ø—Ä–∞–≤–∏–ª: category=${category}, search=${search}`);
    let filteredRules = rules;
    
    if (category && category !== 'all') {
        const beforeFilter = filteredRules.length;
        filteredRules = filteredRules.filter(rule => rule.category === category);
        console.log(`üè∑Ô∏è –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '${category}': ${beforeFilter} ‚Üí ${filteredRules.length} –ø—Ä–∞–≤–∏–ª`);
    }
    
    if (search) {
        filteredRules = searchRules(search);
        console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '${search}': –Ω–∞–π–¥–µ–Ω–æ ${filteredRules.length} –ø—Ä–∞–≤–∏–ª`);
    }
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${filteredRules.length} –ø—Ä–∞–≤–∏–ª`);
    res.json({
        success: true,
        rules: filteredRules,
        total: filteredRules.length
    });
});


// –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
app.get('/api/categories', (req, res) => {
    const categories = [...new Set(rules.map(rule => rule.category))];
    res.json({
        success: true,
        categories: categories
    });
});


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadRules();
loadUsers();

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log('üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª Majestic RP (Node.js)');
    console.log('=' .repeat(60));
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
    console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: ${rules.length}`);
    console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
    console.log('=' .repeat(60));
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
});
